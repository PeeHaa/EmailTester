<?php

$patternStorage = new \EmailTester\Storage\Pattern($dbConnection);
$pattern = $patternStorage->getById(str_replace('/test-pattern/', '', $request->getPath()));

if ($pattern === null) {
    $url = $request->isSsl() ? 'https://' : 'http://';
    $url.= $request->getHost();

    header('Location: ' . $url);
    exit;
}

$addressStorage = new \EmailTester\Storage\Address($dbConnection);
$validAddresses = $addressStorage->getValid();
$invalidAddresses = $addressStorage->getInvalid();
?>

<h2>Pattern: <code><?php echo htmlspecialchars($pattern, ENT_QUOTES, 'UTF-8'); ?></code></h2>

<?php if (@preg_match($pattern, 'whatever') === false) { ?>
    <p class="invalid">Invalid regex pattern supplied!</p>
<?php } return; ?>

<h3>Valid emailaddresses</h3>

<table>
    <?php foreach ($validAddresses as $address) { ?>
        <?php $passFail = (preg_match($pattern, $address) === 1) ? 'PASS' : 'FAIL'; ?>
        <tr class="<?php echo strtolower($passFail); ?>">
            <td><?php echo htmlspecialchars($address, ENT_QUOTES, 'UTF-8'); ?></td>
            <td><?php echo $passFail; ?></td>
        </tr>
    <?php } ?>
</table>

<h3>Invalid emailaddresses</h3>

<table>
    <?php foreach ($invalidAddresses as $address) { ?>
        <?php $passFail = (preg_match($pattern, $address) === 0) ? 'PASS' : 'FAIL'; ?>
        <tr class="<?php echo strtolower($passFail); ?>">
            <td><?php echo htmlspecialchars($address, ENT_QUOTES, 'UTF-8'); ?></td>
            <td><?php echo $passFail; ?></td>
        </tr>
    <?php } ?>
</table>
